suno bhai... shyd tmhe mre project ka bulkul bhi andaza nhi hai...  mere pas 2 DB hain, 1 CourseDB aur jisme dbo.Courses table hai... usme saare courses jama hrhe... or courses me hamare pas id title description or credit hours hain... sahi hai ye hgya hmara CourseDB, ab dusra DB hai SchoolDB , isme mere pas 1 table hai dbo.Students jisme mere pas id name roll number class section ye sab enititys hain... ye hgya database , ab bolo to me code dikhao ek ek file ka student ki bhi api dikhao unke controller view model saare.. phr me tmhe courses ke bhi dikhata hu?? esa krlo? phr UI bhi dikhata? kyuke tmhe to kch pata he nhi hai.... halake tmne he sab krwaya tha aur ab tmhari limitation ki bachodi ki wjh se mere project ki maa chud rhi... so ab batao kya kru me MR chat gpt LUND sahab
---------------------------------------------------------------------------------------------
student controller. cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SchoolAPI.Models;

namespace SchoolAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class StudentController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public StudentController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Student>>> GetStudents()
        {
            return await _context.Students.ToListAsync();
        }

        [HttpPost]
        public async Task<ActionResult<Student>> CreateStudent(Student student)
        {
            _context.Students.Add(student);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetStudents), new { id = student.Id }, student);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> UpdateStudent(int id, Student updated)
        {
            var student = await _context.Students.FindAsync(id);
            if (student == null) return NotFound();

            student.Name = updated.Name;
            student.RollNumber = updated.RollNumber;
            student.Class = updated.Class;
            student.Section = updated.Section;

            await _context.SaveChangesAsync();

            return Ok();

        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteStudent(int id)
        {
            var student = await _context.Students.FindAsync(id);
            if (student == null) return NotFound();
            _context.Students.Remove(student);
            await _context.SaveChangesAsync();  

            return Ok();

        }
    }
}

student model: 
    namespace SchoolAPI.Models
{
    public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Class { get; set; }
        public string Section { get; set; }
        public string RollNumber { get; set; }
    }
}

program.cs: 
using Microsoft.EntityFrameworkCore;
using SchoolAPI.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));


builder.Services.AddControllers();

// Swagger service add karo
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


var app = builder.Build();

// Development mode me swagger middleware chalana
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();

applicationDBContext.cs: 
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;

namespace SchoolAPI.Models
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
        { }

        public DbSet<Student> Students { get; set; }
    }
}

.. ye saara students ka hai ab aage course service ka bhi derha hu aur UI bhi ..







------------------------------------------------------------------------------------------------------------

course controller.cs: 
using CourseService.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace CourseService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CourseController : ControllerBase
    {
        private readonly DataContext _context;
        public CourseController(DataContext context)
        {
               _context = context;
        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Course>>> GetCourses()
        {
            return await _context.Courses.ToListAsync();
        }

        [HttpPost]
        public async Task<ActionResult> AddCourse(Course course)
        {
            _context.Courses.Add(course);
            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpPut("{id}")]
        public async Task<ActionResult> UpdateCourse(int id, Course updated)
        {
            var course = await _context.Courses.FindAsync(id);
            if (course == null) return NotFound();

            course.Title = updated.Title;
            course.Description = updated.Description;
            course.CreditHours = updated.CreditHours;

            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteCourse(int id)
        {
            var course = await _context.Courses.FindAsync(id);
            if (course == null) return NotFound();

            _context.Courses.Remove(course);
            await _context.SaveChangesAsync();
            return Ok();
        }

    }
}

courseModel.cs: 
namespace CourseService.Models
{
    public class Course
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public int CreditHours { get; set; }
    }
}

datacontext: 
using Microsoft.EntityFrameworkCore;

namespace CourseService.Models
{
    public class DataContext : DbContext
    {
        public DataContext(DbContextOptions<DataContext> options) : base(options) { }

        public DbSet<Course> Courses { get; set; }
 
    }

 }

program.cs:
using CourseService.Models;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<DataContext>(options =>
options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


    
var app = builder.Build();



// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}



app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();

ye lo courses ka ab batao UI me kya kya du? sab dedu jo b hai?


------------------------------------------------------------------------

view studentsform.cs:
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI.Views
{
    public partial class btnDelete : Form
    {
        public btnDelete()
        {
            InitializeComponent();
        }

        private async void btnRefresh_Click(object sender, EventArgs e)
        {
            var controller = new StudentController();
            var students = await controller.GetStudentsAsync();
            dataGridViewStudents.DataSource = students;
        }

        private async void ViewStudentsForm_Load(object sender, EventArgs e)
        {
            var controller = new StudentController();
            var students = await controller.GetStudentsAsync();
            dataGridViewStudents.DataSource = students;
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private async void button1_Click(object sender, EventArgs e)
        {
            if (dataGridViewStudents.SelectedRows.Count > 0)
            {
                var confirm = MessageBox.Show("Are you sure you want to delete this student?", "Confirm", MessageBoxButtons.YesNo);
                Student student = null;
                if (confirm == DialogResult.Yes)
                {
                    // Get selected student from DataGridView
                    var selectedRow = dataGridViewStudents.SelectedRows[0];
                    student = selectedRow.DataBoundItem as Student;
                }
                if (student != null)
                {
                    var controller = new StudentController();
                    await controller.DeleteStudentAsync(student.Id);

                    MessageBox.Show("Student deleted successfully!");

                    // Refresh Data
                    var students = await controller.GetStudentsAsync();
                    dataGridViewStudents.DataSource = students;
                }

            }
            else
            {
                MessageBox.Show("Please select a student row first.");
            }
        }
    }
}


addCourseform.cs:

using Newtonsoft.Json;
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI.Views
{
    public partial class btnDeleteCourse : Form
    {
        public btnDeleteCourse()
        {
            InitializeComponent();
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private async void btnAddCourse_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(txtTitle.Text))
            {
                MessageBox.Show("Title is required!");
                return;
            }

            var course = new Course
            {
                Title = txtTitle.Text,
                Description = txtDescription.Text,
                CreditHours = (int)numCreditHours.Value
            };

            var controller = new CourseController();
            await controller.AddCourseAsync(course);

            MessageBox.Show("Course added successfully!");

            txtTitle.Clear();
            txtDescription.Clear();
            numCreditHours.Value = 1;

            LoadCoursesAsync();
        }
            
        
        private async void LoadCoursesAsync()
        {
            var controller = new CourseController();
            var courses = await controller.GetCoursesAsync();
            dataGridCourses.DataSource = courses;
        }

       
        private async void button1_Click(object sender, EventArgs e)
        {
            if (dataGridCourses.SelectedRows.Count == 0)
            {
                MessageBox.Show("Please select a course to delete.");
                return;
            }

            // Select ki gayi row se ID nikaalo
            var selectedRow = dataGridCourses.SelectedRows[0];
            var course = (Course)selectedRow.DataBoundItem;

            var confirm = MessageBox.Show($"Are you sure you want to delete '{course.Title}'?", "Confirm Delete", MessageBoxButtons.YesNo);
            if (confirm == DialogResult.Yes)
            {
                var controller = new CourseController();
                await controller.DeleteCourseAsync(course.Id);

                MessageBox.Show("Course deleted successfully!");

                LoadCoursesAsync(); // List refresh
            }

        }
        private async Task LoadCourses()
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri("https://localhost:7289"); // yahan apni CourseService API ka URL daalo
                HttpResponseMessage response = await client.GetAsync("/api/course");

                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var courseList = JsonConvert.DeserializeObject<List<Course>>(json);
                    dataGridCourses.DataSource = courseList; // ya jis control mein dikha rahe ho
                }
            }
        }

        private async void AddCourseForm_Load(object sender, EventArgs e)
        {
            await LoadCourses();
        }


        private async void btnRefresh_Click(object sender, EventArgs e)
        {
            await LoadCourses();
        }
    }
}

program.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI
{
    internal static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

updateStudentForm.cs:
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI.Views
{
    public partial class UpdateStudentForm : Form
    {
        private List<Student> studentList = new List<Student>();
        public UpdateStudentForm()
        {
            InitializeComponent();
        }

        private async void UpdateStudentForm_Load(object sender, EventArgs e)
        {
            var controller = new StudentController();
            studentList = await controller.GetStudentsAsync();

            comboBoxStudents.DataSource = studentList;
            comboBoxStudents.DisplayMember = "Name";
            comboBoxStudents.ValueMember = "Id";

        }

        private void btnLoad_Click(object sender, EventArgs e)
        {
            if (comboBoxStudents.SelectedItem is Student selected)
            {
                txtName.Text = selected.Name;
                txtRollNumber.Text = selected.RollNumber;
                txtClass.Text = selected.Class;
                txtSection.Text = selected.Section;
            }
        }

        private async void btnUpdate_Click(object sender, EventArgs e)
        {
            if (comboBoxStudents.SelectedItem is Student selected)
            {
                selected.Name = txtName.Text;
                selected.RollNumber = txtRollNumber.Text;
                selected.Class = txtClass.Text;
                selected.Section = txtSection.Text;
                var controller = new StudentController();
                await controller.UpdateStudentAsync(selected);

                MessageBox.Show("Student updated successfully!");
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }
    }
}

AddStudentForm.cs:
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI.Views
{
    public partial class AddStudentForm : Form
    {
        public AddStudentForm()
        {
            InitializeComponent();
        }

        private async void btnAddStudent_Click(object sender, EventArgs e)
        {
            var student = new Student
            {
                Name = txtName.Text,
                RollNumber = txtRollNumber.Text,
                Class = txtClass.Text,
                Section = txtSection.Text
            };
            var controller = new StudentController();
            await controller.AddStudentAsync(student);

            MessageBox.Show("Student added successfully!");

        }

        private void AddStudentForm_Load(object sender, EventArgs e)
        {

        }

        private void txtName_TextChanged(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }
    }
}
updateStudentForm.cs:
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace StudentManagementUI.Views
{
    public partial class UpdateStudentForm : Form
    {
        private List<Student> studentList = new List<Student>();
        public UpdateStudentForm()
        {
            InitializeComponent();
        }

        private async void UpdateStudentForm_Load(object sender, EventArgs e)
        {
            var controller = new StudentController();
            studentList = await controller.GetStudentsAsync();

            comboBoxStudents.DataSource = studentList;
            comboBoxStudents.DisplayMember = "Name";
            comboBoxStudents.ValueMember = "Id";

        }

        private void btnLoad_Click(object sender, EventArgs e)
        {
            if (comboBoxStudents.SelectedItem is Student selected)
            {
                txtName.Text = selected.Name;
                txtRollNumber.Text = selected.RollNumber;
                txtClass.Text = selected.Class;
                txtSection.Text = selected.Section;
            }
        }

        private async void btnUpdate_Click(object sender, EventArgs e)
        {
            if (comboBoxStudents.SelectedItem is Student selected)
            {
                selected.Name = txtName.Text;
                selected.RollNumber = txtRollNumber.Text;
                selected.Class = txtClass.Text;
                selected.Section = txtSection.Text;
                var controller = new StudentController();
                await controller.UpdateStudentAsync(selected);

                MessageBox.Show("Student updated successfully!");
            }
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }
    }
}

models ke folder me:
student.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StudentManagementUI.Models
{
    public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string RollNumber { get; set; }
        public string Class { get; set; }
        public string Section { get; set; }
    }
}

course.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StudentManagementUI.Models
{
    public class Course
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public int CreditHours { get; set; }
    }

}

controller ke folder me:
Course controller.Cs:
using StudentManagementUI.Models;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

public class CourseController
{
    private readonly HttpClient _client;

    public CourseController()
    {
        _client = new HttpClient();
        _client.BaseAddress = new Uri("https://localhost:7289/"); // ⬅️ CourseService API ka URL daalo yahan
    }

    public async Task AddCourseAsync(Course course)
    {
        await _client.PostAsJsonAsync("api/course", course);
    }

    public async Task<List<Course>> GetCoursesAsync()
    {
        return await _client.GetFromJsonAsync<List<Course>>("api/course");
    }


    public async Task DeleteCourseAsync(int courseId)
    {
        await _client.DeleteAsync($"api/course/{courseId}");
    }

    public async Task UpdateCourseAsync(Course course)
    {
        await _client.PutAsJsonAsync($"api/course/{course.Id}", course);
    }

  


    // Baad mein Get, Update, Delete bhi add karenge
}

StudentController.cs:
using StudentManagementUI.Models;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;

public class StudentController
{
    private readonly HttpClient _client;

    public StudentController()
    {
        _client = new HttpClient();
        _client.BaseAddress = new Uri("http://localhost:7207/");    
    }

    public async Task<List<Student>> GetStudentsAsync()
    {
        return await _client.GetFromJsonAsync<List<Student>>("api/student");
    }

    public async Task AddStudentAsync(Student student)
    {
        await _client.PostAsJsonAsync("api/student", student);
    }

    public async Task UpdateStudentAsync(Student student)
    {
        await _client.PutAsJsonAsync($"api/student/{student.Id}", student);
    }

    public async Task DeleteStudentAsync(int id)
    {
        await _client.DeleteAsync($"api/student/{id}");
    }
}
dekhlo sab

